plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// JSON
	implementation group: 'org.json', name: 'json', version: '20231013'

	// JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

	// S3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// REDIS
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// MAIL
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// OAUTH
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// SECURITY
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// THYMELEAF
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

	// VALIDATION
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// WEB
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// LOMBOK
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// H2
	runtimeOnly 'com.h2database:h2'

	// MYSQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	// TEST
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

jacoco {
	toolVersion = "0.8.7"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	reports {
		html.required = true
		csv.required = false
		xml.required = false
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}
		}
	}
}